import sys,os
sys.path.insert(0,os.path.abspath(__file__+"/../.."))

from crispr.cut import tabbed_string_from_list, cut_fastafile, cut_unicodestring


def test_tabbed_string_from_list():
    assert(tabbed_string_from_list(('Scaffold102974:1-1500()', 786, 806, 'BfaI', 1000)) ==
           'Scaffold102974:1-1500()\t786\t806\tBfaI\t1000\n'
           )


# 42nt long section of of Scaffold02974 around the first cut from enzyme BfaI
#############################################################################
# with recognition site C^TA_G at one-based coords: 21,22,23,24
# GCGCTGGCCAGAACGTTCTC^TA_GGAATCGTGGAGAAGACATT
def test_cut_fastafile_42():

    assert (
        cut_fastafile('tests/data/fourtytwobp.fasta') == [
            'fourtytwobps\t0\t20\tBfaI\t1000\t+\n',
            'fourtytwobps\t22\t42\tBfaI\t1000\t-\n']
    )





def test_cut_unicodestring_42():
    unicodestring = u'''>fourtytwobps
GCGCTGGCCAGAACGTTCTCTAGGAATCGTGGAGAAGACATT
'''
    expected_list_of_bedtules = ['fourtytwobps\t0\t20\tBfaI\t1000\t+\n', 'fourtytwobps\t22\t42\tBfaI\t1000\t-\n']
    assert(cut_unicodestring(unicodestring)==expected_list_of_bedtules)

# From crisper-eating paper, we should get:
#
# [seqio.SeqRecord(seq=Seq('GCGCTGGCCAGAACGTTCTC', SingleLetterAlphabet()),
#                  id='1_F', name='788', description='BfaI', dbxrefs=['Scaffold102974']),
#  seqio.SeqRecord(seq=Seq('AATGTCTTCTCCACGATTCC', SingleLetterAlphabet()),
#                  id='2_R', name='810', description='BfaI', dbxrefs=['Scaffold102974']),
#  seqio.SeqRecord(seq=Seq('TAAAGGAGAAGGAAACCCCC', SingleLetterAlphabet()),
#                  id='2_F', name='1444', description='BfaI', dbxrefs=['Scaffold102974']),
#  seqio.SeqRecord(seq=Seq('AGGGGAGGGATTTTTGTGCC', SingleLetterAlphabet()),
#                  id='3_R', name='1465', description='BfaI', dbxrefs=['Scaffold102974']),
#  seqio.SeqRecord(seq=Seq('GGAGGGACAGCAGCTGGGCC', SingleLetterAlphabet()),
#                  id='4_F', name='734', description='ScrFI', dbxrefs=['Scaffold102974']),
#  seqio.SeqRecord(seq=Seq('ATCTTTCTTGCCCCCCCCCC', SingleLetterAlphabet()),
#                  id='5_R', name='754', description='ScrFI', dbxrefs=['Scaffold102974'])
#  ]
def test_cut_fastafile_1500():
    cuts1500 = cut_fastafile('tests/data/Scaffold102974:1-1500_1500.fasta')
    expected_list_of_bedtules = ['Scaffold102974:1-1500()\t786\t806\tBfaI\t1000\t+\n',
                                 'Scaffold102974:1-1500()\t808\t828\tBfaI\t1000\t-\n',
                                 'Scaffold102974:1-1500()\t1442\t1462\tBfaI\t1000\t+\n',
                                 'Scaffold102974:1-1500()\t1464\t1484\tBfaI\t1000\t-\n',
                                 'Scaffold102974:1-1500()\t732\t752\tScrFI\t1000\t+\n',
                                 'Scaffold102974:1-1500()\t753\t773\tScrFI\t1000\t-\n']
    assert(cuts1500==expected_list_of_bedtules)


def test_cut_unicodestring_1500():
    unicodestring = u'''>Scaffold102974:1-1500()
TCTCAACAAACCCATAAGTCACTGGTACATTAACAGATAACGCTAATAATAAAATGGCAGAATGACTCAGATACAATTCCCATATAAAAAGCCATTAATA
TGAACAGAACTTACTCGTAAAAATCCAGTGAAAATGAACAGGGTGATGATTAGTGACCTCATGGTGGCATTCAGTCACTAATCTGACAATCCCAACTGTA
AACAGTCCTTATACCAGCTTGTGTCAGGGGCACCATTATGAGGTCATCACTAACAATCATGGCGACCATTGTGATGTCGCTACTAACAATCATGTGACAT
CAACTGCTACAGGCCAAGTCAGCTTTCTGTTACGGCAAATATAGAATGACTGTTAGGGAGACAATATAAGAGCACCTTACAGTAATAAAACTTTATACAT
AAATTCTACTTCATAAATTCATATTTTTTTATTGAAAATCACGATTTATTTAGATTACATTCAACAGCTAATCTTAAATTGACTCAACCTTAGTTATTCT
TATTGCCTGTAATCAATAACAGGTTTTGGGTTGGACATAGTTACATATATTACTTTAAATTCCAAAAGGACAAAAGTCTGTCAAGTTCAACCCCTCCAAT
TTATCCCCAGCATATGTGTGTACATATATATATACTGATGCACACTGGACGTCCACAGAAATGTTGCTACCTATGTCGGATCACAGATAAGGAGATTATT
TAATGCAATTTAATAAAGTGCAACAGATGGGGGGAGGGACAGCAGCTGGGCCTGGGGGGGGGGCAAGAAAGATAAATTTGGTCGTTGCGCTGGCCAGAAC
GTTCTCTAGGAATCGTGGAGAAGACATTGGCCAAAAGAGGAAGGTCTCACCAATGTGCCTTGATGAATAGAACAGTTAAAATATTTCAGCTGTAGCCCTC
CAGCTCCAGAACTATAATTACCAGAATCCACCTCAGTTGGAGGCTGAAGATGCCTTAATTCCAAAATGTATTTATTCTTATGCCTTCTTTTCTTATTTAG
TTTCAGTTTTTTTCTGAACTTTTCTTCTATTAATTTTTACCCTTCCCCAACCAACCCCCATCTTTCCTCACATTTCTCAGTCCCTTATGACCCCCCTTCA
TCTCTTTTTCTGCTCCTTGTTCCTACTCATCTTCTTCTCTGTTCTGCATATTTTGCTCTCTCTCTATGTGTCATGGTGGCTTCAGCTTTTTTCTGAATAG
AGCTCAGCTGAGTAGGGATATTGATTGTGATTGGGAGGTGAACTTCAACCTTAAATCTCCTATTTAGTGCCATGTGAGTGCAGCAATACAACTGTTGGGA
AGGGACTTTGATGGGAGGAATTTGGATGGAAGGGTCTAAAAGAGAGACAGGCCAAGGAAAGGAATCATCTGATTGGCTTGTTTTGATTACTGGCGTAAGA
CAGTTAGAATGCTGAAAGCAACTACTACTGGTCTGTGCTGCTTAAAGGAGAAGGAAACCCCCTAGGCACAAAAATCCCTCCCCTCTCCCCTGTGTTGTC
'''
    expected_list_of_bedtules = ['Scaffold102974:1-1500()\t786\t806\tBfaI\t1000\t+\n',
         'Scaffold102974:1-1500()\t808\t828\tBfaI\t1000\t-\n',
          'Scaffold102974:1-1500()\t1442\t1462\tBfaI\t1000\t+\n',
          'Scaffold102974:1-1500()\t1464\t1484\tBfaI\t1000\t-\n',
          'Scaffold102974:1-1500()\t732\t752\tScrFI\t1000\t+\n',
          'Scaffold102974:1-1500()\t753\t773\tScrFI\t1000\t-\n']
    assert(cut_unicodestring(unicodestring)==expected_list_of_bedtules)




def test_cut_unicodestring_phix():
    unicodestring = u'''>phix
GAGTTTTATCGCTTCCATGACGCAGAAGTTAACACTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGGAATTACTACTGCTTGTTTA
CGAATTAAATCGAAGTGGACTGCTGGCGGAAAATGAGAAAATTCGACCTATCCTTGCGCAGCTCGAGAAGCTCTTACTTTGCGACCTTTCGCCATCAACT
AACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCTTGGCACGTTCGTCAAGGACTGGTTTAGATATGAGTCACATTTTGTT
CATGGTAGAGATTCTCTTGTTGACATTTTAAAAGAGCGTGGATTACTATCTGAGTCCGATGCTGTTCAACCACTAATAGGTAAGAAATCATGAGTCAAGT
TACTGAACAATCCGTACGTTTCCAGACCGCTTTGGCCTCTATTAAGCTCATTCAGGCTTCTGCCGTTTTGGATTTAACCGAAGATGATTTCGATTTTCTG
ACGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGTACGCTGGACTTTGTAGGATACCCTCGCT
TTCCTGCTCCTGTTGAGTTTATTGCTGCCGTCATTGCTTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCTCATCATGGAAGGCGCTGAATTTAC
GGAAAACATTATTAATGGCGTCGAGCGTCCGGTTAAAGCCGCTGAATTGTTCGCGTTTACCTTGCGTGTACGCGCAGGAAACACTGACGTTCTTACTGAC
GCAGAAGAAAACGTGCGTCAAAAATTACGTGCAGAAGGAGTGATGTAATGTCTAAAGGTAAAAAACGTTCTGGCGCTCGCCCTGGTCGTCCGCAGCCGTT
GCGAGGTACTAAAGGCAAGCGTAAAGGCGCTCGTCTTTGGTATGTAGGTGGTCAACAATTTTAATTGCAGGGGCTTCGGCCCCTTACTTGAGGATAAATT
ATGTCTAATATTCAAACTGGCGCCGAGCGTATGCCGCATGACCTTTCCCATCTTGGCTTCCTTGCTGGTCAGATTGGTCGTCTTATTACCATTTCAACTA
CTCCGGTTATCGCTGGCGACTCCTTCGAGATGGACGCCGTTGGCGCTCTCCGTCTTTCTCCATTGCGTCGTGGCCTTGCTATTGACTCTACTGTAGACAT
TTTTACTTTTTATGTCCCTCATCGTCACGTTTATGGTGAACAGTGGATTAAGTTCATGAAGGATGGTGTTAATGCCACTCCTCTCCCGACTGTTAACACT
ACTGGTTATATTGACCATGCCGCTTTTCTTGGCACGATTAACCCTGATACCAATAAAATCCCTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACA
ACTATTTTAAAGCGCCGTGGATGCCTGACCGTACCGAGGCTAACCCTAATGAGCTTAATCAAGATGATGCTCGTTATGGTTTCCGTTGCTGCCATCTCAA
AAACATTTGGACTGCTCCGCTTCCTCCTGAGACTGAGCTTTCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTAT
GCTAATTTGCATACTGACCAAGAACGTGATTACTTCATGCAGCGTTACCATGATGTTATTTCTTCATTTGGAGGTAAAACCTCTTATGACGCTGACAACC
GTCCTTTACTTGTCATGCGCTCTAATCTCTGGGCATCTGGCTATGATGTTGATGGAACTGACCAAACGTCGTTAGGCCAGTTTTCTGGTCGTGTTCAACA
GACCTATAAACATTCTGTGCCGCGTTTCTTTGTTCCTGAGCATGGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATT
CAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGGCAACTTGCCGCCGCGTGAAATTTCTATGAAGGATG
TTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCAGTGGTATCGTTATGCGCCTTCGTATGTTTCTCCTGCTTATCACCTTCTTGA
AGGCTTCCCATTCATTCAGGAACCGCCTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAGTTG
TTGCAGTGGAATAGTCAGGTTAAATTTAATGTGACCGTTTATCGCAATCTGCCGACCACTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTG
AGGTTATAACGCCGAAGCGGTAAAAATTTTAATTTTTGCCGCTGAGGGGTTGACCAAGCGAAGCGCGGTAGGTTTTCTGCTTAGGAGTTTAATCATGTTT
CAGACTTTTATTTCTCGCCATAATTCAAACTTTTTTTCTGATAAGCTGGTTCTCACTTCTGTTACTCCAGCTTCTTCGGCACCTGTTTTACAGACACCTA
AAGCTACATCGTCAACGTTATATTTTGATAGTTTGACGGTTAATGCTGGTAATGGTGGTTTTCTTCATTGCATTCAGATGGATACATCTGTCAACGCCGC
TAATCAGGTTGTTTCTGTTGGTGCTGATATTGCTTTTGATGCCGACCCTAAATTTTTTGCCTGTTTGGTTCGCTTTGAGTCTTCTTCGGTTCCGACTACC
CTCCCGACTGCCTATGATGTTTATCCTTTGGATGGTCGCCATGATGGTGGTTATTATACCGTCAAGGACTGTGTGACTATTGACGTCCTTCCTCGTACGC
CGGGCAATAATGTTTATGTTGGTTTCATGGTTTGGTCTAACTTTACCGCTACTAAATGCCGCGGATTGGTTTCGCTGAATCAGGTTATTAAAGAGATTAT
TTGTCTCCAGCCACTTAAGTGAGGTGATTTATGTTTGGTGCTATTGCTGGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAG
GCGGTCAAAAAGCCGCCTCCGGTGGCATTCAAGGTGATGTGCTTGCTACCGATAACAATACTGTAGGCATGGGTGATGCTGGTATTAAATCTGCCATTCA
AGGCTCTAATGTTCCTAACCCTGATGAGGCCGCCCCTAGTTTTGTTTCTGGTGCTATGGCTAAAGCTGGTAAAGGACTTCTTGAAGGTACGTTGCAGGCT
GGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAAAGGAAAGGATACTCGTGATTATCTTGCTGCTG
CATTTCCTGAGCTTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTCTGCTGGTATGGTTGACGCCGGATTTGAGAATCAAAAAGAGCTTACTAAAAT
GCAACTGGACAATCAGAAAGAGATTGCCGAGATGCAAAATGAGACTCAAAAAGAGATTGCTGGCATTCAGTCGGCGACTTCACGCCAGAATACGAAAGAC
CAGGTATATGCACAAAATGAGATGCTTGCTTATCAACAGAAGGAGTCTACTGCTCGCGTTGCGTCTATTATGGAAAACACCAATCTTTCCAAGCAACAGC
AGGTTTCCGAGATTATGCGCCAAATGCTTACTCAAGCTCAAACGGCTGGTCAGTATTTTACCAATGACCAAATCAAAGAAATGACTCGCAAGGTTAGTGC
TGAGGTTGACTTAGTTCATCAGCAAACGCAGAATCAGCGGTATGGCTCTTCTCATATTGGCGCTACTGCAAAGGATATTTCTAATGTCGTCACTGATGCT
GCTTCTGGTGTGGTTGATATTTTTCATGGTATTGATAAAGCTGTTGCCGATACTTGGAACAATTTCTGGAAAGACGGTAAAGCTGATGGTATTGGCTCTA
ATTTGTCTAGGAAATAACCGTCAGGATTGACACCCTCCCAATTGTATGTTTTCATGCCTCCAAATCTTGGAGGCTTTTTTATGGTTCGTTCTTATTACCC
TTCTGAATGTCACGCTGATTATTTTGACTTTGAGCGTATCGAGGCTCTTAAACCTGCTATTGAGGCTTGTGGCATTTCTACTCTTTCTCAATCCCCAATG
CTTGGCTTCCATAAGCAGATGGATAACCGCATCAAGCTCTTGGAAGAGATTCTGTCTTTTCGTATGCAGGGCGTTGAGTTCGATAATGGTGATATGTATG
TTGACGGCCATAAGGCTGCTTCTGACGTTCGTGATGAGTTTGTATCTGTTACTGAGAAGTTAATGGATGAATTGGCACAATGCTACAATGTGCTCCCCCA
ACTTGATATTAATAACACTATAGACCACCGCCCCGAAGGGGACGAAAAATGGTTTTTAGAGAACGAGAAGACGGTTACGCAGTTTTGCCGCAAGCTGGCT
GCTGAACGCCCTCTTAAGGATATTCGCGATGAGTATAATTACCCCAAAAAGAAAGGTATTAAGGATGAGTGTTCAAGATTGCTGGAGGCCTCCACTATGA
AATCGCGTAGAGGCTTTGCTATTCAGCGTTTGATGAATGCAATGCGACAGGCTCATGCTGATGGTTGGTTTATCGTTTTTGACACTCTCACGTTGGCTGA
CGACCGATTAGAGGCGTTTTATGATAATCCCAATGCTTTGCGTGACTATTTTCGTGATATTGGTCGTATGGTTCTTGCTGCCGAGGGTCGCAAGGCTAAT
GATTCACACGCCGACTGCTATCAGTATTTTTGTGTGCCTGAGTATGGTACAGCTAATGGCCGTCTTCATTTCCATGCGGTGCACTTTATGCGGACACTTC
CTACAGGTAGCGTTGACCCTAATTTTGGTCGTCGGGTACGCAATCGCCGCCAGTTAAATAGCTTGCAAAATACGTGGCCTTATGGTTACAGTATGCCCAT
CGCAGTTCGCTACACGCAGGACGCTTTTTCACGTTCTGGTTGGTTGTGGCCTGTTGATGCTAAAGGTGAGCCGCTTAAAGCTACCAGTTATATGGCTGTT
GGTTTCTATGTGGCTAAATACGTTAACAAAAAGTCAGATATGGACCTTGCTGCTAAAGGTCTAGGAGCTAAAGAATGGAACAACTCACTAAAAACCAAGC
TGTCGCTACTTCCCAAGAAGCTGTTCAGAATCAGAATGAGCCGCAACTTCGGGATGAAAATGCTCACAATGACAAATCTGTCCACGGAGTGCTTAATCCA
ACTTACCAAGCTGGGTTACGACGCGACGCCGTTCAACCAGATATTGAAGCAGAACGCAAAAAGAGAGATGAGATTGAGGCTGGGAAAAGTTACTGTAGCC
GACGTTTTGGCGGCGCAACCTGTGACGACAAATCTGCTCAAATTTATGCGCGCTTCGATAAAAATGATTGGCGTATCCAACCTGCA'''
    expected_list_of_bedtules = ['phix\t3116\t3136\tBfaI\t1000\t+\n',
                                 'phix\t3138\t3158\tBfaI\t1000\t-\n',
                                 'phix\t3887\t3907\tBfaI\t1000\t+\n',
                                 'phix\t3909\t3929\tBfaI\t1000\t-\n',
                                 'phix\t5041\t5061\tBfaI\t1000\t+\n',
                                 'phix\t5063\t5083\tBfaI\t1000\t-\n',
                                 'phix\t709\t729\tHpaII\t1000\t+\n',
                                 'phix\t731\t751\tHpaII\t1000\t-\n',
                                 'phix\t1083\t1103\tHpaII\t1000\t+\n',
                                 'phix\t1105\t1125\tHpaII\t1000\t-\n',
                                 'phix\t2780\t2800\tHpaII\t1000\t+\n',
                                 'phix\t2802\t2822\tHpaII\t1000\t-\n',
                                 'phix\t2999\t3019\tHpaII\t1000\t+\n',
                                 'phix\t3021\t3041\tHpaII\t1000\t-\n',
                                 'phix\t3347\t3367\tHpaII\t1000\t+\n',
                                 'phix\t3369\t3389\tHpaII\t1000\t-\n',
                                 'phix\t862\t882\tScrFI\t1000\t+\n',
                                 'phix\t883\t903\tScrFI\t1000\t-\n',
                                 'phix\t2781\t2801\tScrFI\t1000\t+\n',
                                 'phix\t2802\t2822\tScrFI\t1000\t-\n',
                                 'phix\t3481\t3501\tScrFI\t1000\t+\n',
                                 'phix\t3502\t3522\tScrFI\t1000\t-\n']
    assert(cut_unicodestring(unicodestring)==expected_list_of_bedtules)